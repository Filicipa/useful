name: Backend deploy

on:
  workflow_dispatch:
  push:
    branches:
      - dev
    paths-ignore:
      - ".github/workflows/**"
env:
  name: ${GITHUB_REPOSITORY#*/}"-dev"
  ssh-key: ${{ secrets.DEV_SSH_KEY }}
  tag: ${{ github.sha }}
  host: ${{ secrets.DEV_NAME }}@${{ secrets.DEV_IP }}

jobs:
  Build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build docker image
        run: |
          docker build . -t ${{ env.name }}:${{ env.tag }}

      - name: Save docker image
        run: |
          docker save -o ${{ env.name }}.tar ${{ env.name }}:${{ env.tag }}

      - name: Generate SSH key
        run: |
          echo "${{ env.ssh-key }}" > ssh-key.pem
          sudo chmod 400 ssh-key.pem

      - name: Copy image to EC2
        run: |
          scp -i ssh-key.pem -o StrictHostKeyChecking=no ${{ env.name }}.tar ${{ env.host }}:${{ env.name }}.tar

  Deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Generate SSH key
        run: |
          echo "${{ env.ssh-key }}" > ssh-key.pem
          sudo chmod 400 ssh-key.pem

      - name: Start image
        run: |
          ssh -i ssh-key.pem -o StrictHostKeyChecking=no ${{ env.host }} ' \
          sudo docker load -i '${{ env.name }}'.tar && \
          sudo docker stop '${{ env.name }}' ; \
          sudo docker run -d --restart always -p '${{ vars.PORT }}':'${{ vars.PORT }}' \
          -e DATABASE_URL='${{ secrets.DATABASE_URL }}' \
          -e HASHER_IV='${{ secrets.HASHER_IV}}' \
          -e HASHER_SECRET_KEY='${{ secrets.HASHER_SECRET_KEY }}' \
          -e REDIS_HOST='${{ secrets.REDIS_HOST }}' \
          -e REDIS_PORT='${{ secrets.REDIS_PORT }}' \
          -e REDIS_URL='${{ secrets.REDIS_URL }}' \
          -e REDIS_JWT_REFRESH_EXPIRATION='${{ secrets.REDIS_JWT_REFRESH_EXPIRATION }}' \
          -e SWAGGER_VERSION='${{ vars.SWAGGER_VERSION }}' \
          -e HOST='${{ vars.HOST }}' \
          -e PORT='${{ vars.PORT }}' \
          --network weway \
          --name '${{ env.name }}'-new '${{ env.name }}':'${{ env.tag }}' && \
          sudo docker rm '${{ env.name }}' && sudo docker rmi $(sudo docker images -q); \
          sudo docker rename '${{ env.name }}'-new '${{ env.name }}' && \
          rm '${{ env.name }}'.tar'
